package com.tanmay.taskmanager.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tanmay.taskmanager.entity.Task;
import com.tanmay.taskmanager.entity.User;
import com.tanmay.taskmanager.services.TaskService;
import com.tanmay.taskmanager.services.UserService;

@RestController
@RequestMapping("/tasks")
@CrossOrigin(origins = "http://localhost:5173")
public class TaskController {

    @Autowired
    private TaskService taskService;

    @Autowired
    private UserService userService;

    // Create a new task
    @PostMapping("/add")
    public ResponseEntity<String> createTask(@RequestBody Task task) {
        User user = userService.findById(task.getUser().getId());
        if (user == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid user ID");
        }
        task.setUser(user);
        taskService.saveTask(task);
        return ResponseEntity.ok("Task created successfully");
    }

    // Get all tasks for a user
    @GetMapping("/{userId}")
    public ResponseEntity<List<Task>> getTasks(@PathVariable Long userId) {
        User user = userService.findById(userId);
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        return ResponseEntity.ok(taskService.getTasksByUser(user));
    }

    // Update task status
    @PutMapping("/{taskId}")
    public ResponseEntity<String> updateTaskStatus(@PathVariable Long taskId, @RequestBody Task task) {
        Task updated = taskService.updateTaskStatus(taskId, task.getStatus());
        Task updated = taskService.updateTaskStatus(taskId, task.get());
        Task updated = taskService.updateTaskStatus(taskId, task.getStatus());
        if (updated == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Task not found");
        }
        return ResponseEntity.ok("Task updated successfully");
    }

    // Delete a task
    @DeleteMapping("/{taskId}")
    public ResponseEntity<String> deleteTask(@PathVariable Long taskId) {
        taskService.deleteTask(taskId);
        return ResponseEntity.ok("Task deleted successfully");
    }
}
