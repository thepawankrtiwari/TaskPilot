package com.tanmay.taskmanager.controller;

import java.io.File;
import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;   // ðŸ‘ˆ import PutMapping
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.tanmay.taskmanager.entity.Profile;
import com.tanmay.taskmanager.entity.User;
import com.tanmay.taskmanager.services.ProfileService;
import com.tanmay.taskmanager.services.UserService;

@RestController
@RequestMapping("/api/profile")
@CrossOrigin(origins = "http://localhost:5173") // frontend URL
public class ProfileController {

    @Autowired
    private ProfileService profileService;

    @Autowired
    private UserService userService;
    
    // CREATE profile
    @PostMapping("/upload")
    public Profile uploadProfile(
        @RequestParam("userId") Long userId,
        @RequestParam("fullName") String fullName,
        @RequestParam("email") String email,
        @RequestParam("bio") String bio,
        @RequestParam("photo") MultipartFile file
    ) throws IOException {

        // Define upload folder path
        String uploadDir = System.getProperty("user.dir") + File.separator + "uploads";

        // Create folder if it doesn't exist
        File directory = new File(uploadDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        // Save file in that folder
        String filePath = uploadDir + File.separator + file.getOriginalFilename();
        file.transferTo(new File(filePath));

        // ðŸ”¹ Fetch the User and link it to the Profile
        User user = userService.findById(userId);

        Profile profile = new Profile();
        profile.setFullName(fullName);
        profile.setEmail(email);
        profile.setBio(bio);
        profile.setPhotoUrl(filePath);
        profile.setUser(user); // ðŸ‘ˆ link user to profile

        return profileService.saveProfile(profile);
    }

    // READ profile
    @GetMapping("/{userId}")
    public Profile getProfile(@PathVariable Long userId) {
        return profileService.getProfileByUserId(userId);
    }

    // UPDATE profile
    @PutMapping("/{userId}")
    public Profile updateProfile(
        @PathVariable Long userId,
        @RequestParam("fullName") String fullName,
        @RequestParam("email") String email,
        @RequestParam("bio") String bio,
        @RequestParam(value = "photo", required = false) MultipartFile file
    ) throws IOException {
        
        Profile profile = profileService.getProfileByUserId(userId);
        if (profile == null) {
            throw new RuntimeException("Profile not found for userId: " + userId);
        }

        profile.setFullName(fullName);
        profile.setEmail(email);
        profile.setBio(bio);

        // If a new file is uploaded, update the photo
        if (file != null && !file.isEmpty()) {
            String uploadDir = System.getProperty("user.dir") + File.separator + "uploads";
            File directory = new File(uploadDir);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            String filePath = uploadDir + File.separator + file.getOriginalFilename();
            file.transferTo(new File(filePath));

            profile.setPhotoUrl(filePath);
        }

        return profileService.saveProfile(profile);
    }
}
