package com.tanmay.taskmanager.controller;

import java.io.File;
import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.tanmay.taskmanager.entity.Profile;
import com.tanmay.taskmanager.entity.User;
import com.tanmay.taskmanager.services.ProfileService;
import com.tanmay.taskmanager.services.UserService;

@RestController
@RequestMapping("/api/profile")
@CrossOrigin(origins = "http://localhost:5173") // frontend URL
public class ProfileController {

    @Autowired
    private ProfileService profileService;

    @Autowired
    private UserService userService;
    
    @PostMapping("/upload")
    public Profile uploadProfile(
    		 @RequestParam("userId") Long userId,
            @RequestParam("fullName") String fullName,
            @RequestParam("email") String email,
            @RequestParam("bio") String bio,
            @RequestParam("photo") MultipartFile file
    ) throws IOException {

        // Define upload folder path (relative to project root or absolute)
        String uploadDir = System.getProperty("user.dir") + File.separator + "uploads";

        // Create folder if it doesn't exist
        File directory = new File(uploadDir);
        if (!directory.exists()) {
            directory.mkdirs();
        }

        // Save file in that folder
        String filePath = uploadDir + File.separator + file.getOriginalFilename();
        file.transferTo(new File(filePath));

        
     // ðŸ”¹ Fetch the User and link it to the Profile
        User user = userService.findById(userId);
        
        
        Profile profile = new Profile();
        profile.setFullName(fullName);
        profile.setEmail(email);
        profile.setBio(bio);
        profile.setPhotoUrl(filePath);
        profile.setUser(user); // ðŸ‘ˆ link user to profile


        return profileService.saveProfile(profile);
    }

    @GetMapping("/{userId}")
    public Profile getProfile(@PathVariable Long userId) {
        return profileService.getProfileByUserId(userId);
    }
    
    
    
}
